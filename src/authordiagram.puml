@startuml
package "Java Author Service" {
    class Author {
        - id: Long
        - firstName: String
        - lastName: String
        - email: String
    }

    interface AuthorRepository {
        + save(author): Author
        + findById(id): Optional<Author>
        + findAll(): List<Author>
        + delete(author): void
    }

    class AuthorService {
        + createAuthor(author): Author
        + getAllAuthors(): List<Author>
        + getAuthorWithArticles(id): Author
        + createArticleForAuthor(id, article): void
    }

    class AuthorController {
        + createAuthor(author): Response
        + getAllAuthors(): Response
        + getAuthorWithArticles(id): Response
        + createArticleForAuthor(id, article): Response
    }

    class ArticleClient {
        + getArticlesByAuthor(authorId): List<Article>
        + createArticleForAuthor(authorId, article): void
    }

    AuthorController --> AuthorService : calls
    AuthorService --> AuthorRepository : uses
    AuthorRepository --> Author : manages
    AuthorService --> ArticleClient : uses
}

package "Node.js Article Service" {
    class Article {
        - id: Long
        - title: String
        - content: String
        - authorId: Long
    }

    class ArticleServiceNode {
        + createArticle(authorId, article): Article
        + getArticlesByAuthor(authorId): List<Article>
    }

    class ArticleControllerNode {
        + POST /articles/author/{authorId}
        + GET /articles/author/{authorId}
    }

    ArticleControllerNode --> ArticleServiceNode : calls
    ArticleServiceNode --> Article : manages
}

database "PostgreSQL Database" {
    frame "Tables" {
        [authors]
        [articles]
        [topics]
    }
}

Author --> [authors] : mapped to
Article --> [articles] : mapped to
Article --> Author : "References via authorId"

@enduml
